
# This script is intended to automate the X.509 certificate generation process.

# This script is intended to automate the X.509 certificate generation process.
# Keys, Certificates and PEM files to be used by the Domino kyrtool are automatically created if you use the local CA.
# For a public or corporate CA this script helps you generate the private key pair, signing requests (CSRs).
# And it also helps to build a PEM file which can be used for example the Domino kyrtool.

# Certificate Authority (CA) Configuration

# If you don't have a company CA configuration this script can create a simple,local CA.
# It will be used to generate all certificates needed. This is the default configuration.

# The following section defines the local CA.

# Please configure your company specific settings

# -------------------------- #
#  BEGIN MAIN CONFIGURATION  #
# -------------------------- #

# Create the following specified certs (for AppDevPack)
CREATE_CONFIGURED_CERTS="yes"

DOMINO_ORG="Acme"

DOMINO_SERVER="domino"
DOMINO_DNS="domino.acme.loc"

PROTON_SERVER="proton"
PROTON_DNS="proton.acme.loc"

IAM_SERVER="iam_server"
IAM_SERVER_DNS="iam.acme.loc"

IAM_CLIENT="iam_client"
IAM_CLIENT_NAME="/O=$DOMIMO_ORG/CN=$IAM_CLIENT"

# You can choose between two different configurations 

# a.) a local, simple CA should be used
# b.) a public or corporate CA should be used

USE_LOCAL_CA="yes"

CA_ORG=NashCom
CA_PASSWORD=domino4ever

CREATE_KEYRINGS="yes"
KEYRING_PASSWORD=domino4ever

CERTMGR_DIR=/local/certmgr

# -------------------------- #
#   END MAIN CONFIGURATION   #
# -------------------------- #


# Local CA Configuration
# ----------------------

# If you stay with the default configuration, a simple CA will be created via openssl.
# All certificates are automatically signed by this local CA when invoking this script.
# The whole process is processed in one step. However the script is designed to allow to update/regenerate keys and certificates.


# Public/Company CA 
# -----------------

# When using a public or company CA, this script automatically creates the private keys and certificate signing requests (CSRs).
# You have send those CSR files (*.csr) to the external CA and get back a certificate file (*.crt) in PEM format.
# To import the certificate automatically, the *.crt needs to have a matching name used for the *.csr file.
# IMPORTANT: For external CAs you have to also provide a PEM file (ca_all.pem) with the public key of the Root CA 
# and all intermediate certificates (ordered from most specific to Root CA cert).

# Steps:

# 1. Run this script once to generate the *.key files and *.csr files
# 2. Let the *.csr files sign from the external CA
# 3. Get the *.crt file with a matching name (before the dot) and copy it back to this directory
# 4. Ensure a certificate PEM file for the CA and all intermediate files is stored in the "pem" directory "ca_all.pem"
# 5. Invoke the script again to generate a xxx_all.pem file for each certificate
# 6. The final PEM file contains the private key, certificate, intermediate certs and the CA's root certificate in the right order to be user by the kyrtool

# The following configuration is optional for special cases and documentation purposes.
# It shows all local CA related default values which can be modified if needed for your convenience.


# Optional Specific Configuration
# ------------------------------- #

# Default configuration should work for most environments

# Optional Specific CA Configuration

CA_VALID_DAYS=3650
CA_KEY=ca.key
CA_CERT=ca.crt
CA_SUBJECT="/O=$CA_ORG/CN=CA"
CA_KEYLEN=4096
CA_ENCRYPTION=-aes256
CERT_SIGN_ALG=-sha256

# Properties for client keys and certificates

CLIENT_KEYLEN=2048
CLIENT_VALID_DAYS=825

# Specific Server Name Configuration

PROTON_SERVER_NAME="/O=$DOMIMO_ORG/CN=$PROTON_SERVER"
DOMINO_SERVER_NAME="/O=$DOMIMO_ORG/CN=$DOMINO_SERVER"
IAM_SERVER_NAME="/O=$DOMIMO_ORG/CN=$IAM_SERVER"

CA_KEY_FILE=$CA_DIR/$CA_KEY
CA_CRT_FILE=$CA_DIR/$CA_CERT
