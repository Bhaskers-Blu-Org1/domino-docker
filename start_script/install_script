#!/bin/sh

###########################################################################
# Install Script - Start/Stop Script for Domino on xLinux/zLinux/AIX      #
# Version 3.3.1 10.01.2020                                                #
#                                                                         #
# (C) Copyright Daniel Nashed/NashCom 2005-2020                           #
# Feedback domino_unix@nashcom.de                                         #
#                                                                         #
# Licensed under the Apache License, Version 2.0 (the "License");         #
# you may not use this file except in compliance with the License.        #
# You may obtain a copy of the License at                                 #
#                                                                         #
#      http://www.apache.org/licenses/LICENSE-2.0                         #
#                                                                         #
# Unless required by applicable law or agreed to in writing, software     #
# distributed under the License is distributed on an "AS IS" BASIS,       #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#
# See the License for the specific language governing permissions and     #
# limitations under the License.                                          #
###########################################################################

SCRIPT_NAME=$0
PARAM1=$1

DOMINO_INSTALL_CONFIG_FILE=rc_domino_config
DOMINO_INSTALL_CONFIG_FILEPATH=/etc/sysconfig/$DOMINO_INSTALL_CONFIG_FILE
DOMINO_START_SCRIPT_DIR=/opt/nashcom/startscript
DOMINO_DOCKER_SCRIPT=domino_docker_entrypoint.sh
VERSION=330

DOMINO_USER=notes
DOMINO_GROUP=notes

ROOT_USER=root
ROOT_GROUP=root

DOMINO_DATA_PATH=/local/notesdata

#DOMINO_DEBUG_MODE="yes"

START_SCRIPT_DIR=`dirname $0`

if [ "$START_SCRIPT_DIR" = "/" ]; then
  START_SCRIPT_DIR=""
fi

if [ ! $EUID = "0" ]; then
  echo "Terminating installation - Please run as root user!"
  exit 1
fi

if [ -r "$START_SCRIPT_DIR/$DOMINO_INSTALL_CONFIG_FILE" ]; then
  . $START_SCRIPT_DIR/$DOMINO_INSTALL_CONFIG_FILE
else
  echo "Terminating installation - cannot read config file! [$START_SCRIPT_DIR/$DOMINO_INSTALL_CONFIG_FILE]"
  exit 1
fi

INIT_PATH=/etc/init.d

# Determine architecture and platform
if [ `uname` = AIX ]; then
  LARCH=ibmpow
  PLATFORM_NAME=AIX
  INIT_PATH=/etc/rc.d
  ROOT_GROUP=system
elif [ `uname` = Linux ]; then
  LARCH=linux
  UNAME=`uname -m`
  if [ $UNAME = s390 ]; then
    PLATFORM_NAME=zLinux
  elif [ $UNAME = s390x ]; then
    PLATFORM_NAME=zLinux
  else
    PLATFORM_NAME=xLinux
  fi

  # Query linux distribution
  if [ ${LARCH} = "linux" ]; then
    if [ -e /etc/SuSE-release ]; then
      LINUX_DISTRIBUTION=suse
    elif [ -e /etc/redhat-release ]; then
      LINUX_DISTRIBUTION=redhat
    else
      LINUX_DISTRIBUTION=unknown
    fi
  fi
fi


DebugText ()
{
  if [ "$DOMINO_DEBUG_MODE" = "yes" ]; then

    if [ -z "$DOMINO_DEBUG_FILE" ]; then
      echo "Debug:" $1 $2 $3 $4 $5 $6 $7 $8 $9
    else
      echo "Debug:" $1 $2 $3 $4 $5 $6 $7 $8 $9 >> $DOMINO_DEBUG_FILE 
    fi
  fi 

  return 0
}

check_file_busy()
{
  if [ ! -e "$1" ]; then
    return 0
  fi

  #TARGET_REAL_BIN=`readlink -f $1`
  TARGET_REAL_BIN=$1
  FOUND_TARGETS=`lsof 2>/dev/null| awk '{print $9}' | grep "$TARGET_REAL_BIN"`

  if [ -n "$FOUND_TARGETS" ]; then
    return 1
  else
    return 0
  fi
}

install_file()
{
  SOURCE_FILE=$1
  TARGET_FILE=$2
  OWNER=$3
  GROUP=$4
  PERMS=$5

  if [ ! -r "$SOURCE_FILE" ]; then
    echo "[$SOURCE_FILE] Can not read source file"
    return 1
  fi

  if [ -e "$TARGET_FILE" ]; then

    cmp -s "$SOURCE_FILE" "$TARGET_FILE"
    if [ $? -eq 0 ]; then
      echo "[$TARGET_FILE] File did not change -- No update needed"
      return 0
    fi

    if [ ! -w "$TARGET_FILE" ]; then
      echo "[$TARGET_FILE] Can not update binary -- No write permissions"
      return 1
    fi

    check_file_busy "$TARGET_FILE"

    if [ $? -eq 1 ]; then
      echo "[$TARGET_FILE] Error - Can not update file -- Binary in use"
      return 1
    fi
  fi
  
  cp -f "$SOURCE_FILE" "$TARGET_FILE"
 
  if [ ! -z "$OWNER" ]; then
    chown $OWNER:$GROUP "$TARGET_FILE"
  fi

  if [ ! -z "$PERMS" ]; then
    chmod "$PERMS" "$TARGET_FILE"
  fi

  echo "[$TARGET_FILE] installed"

  return 2
}

install_file_noupdate()
{
  SOURCE_FILE=$1
  TARGET_FILE=$2
	
  if [ -e "$TARGET_FILE" ]; then
    echo "[$TARGET_FILE] Skipping file -- Not overwriting"  
    return 0
  fi
 
  install_file "$1" "$2" "$3" "$4" "$5" 
}

# rc script files install

echo
echo "Installing StartScript & Config"
echo

if [ ! -e "$DOMINO_START_SCRIPT_DIR" ]; then
  mkdir -p "$DOMINO_START_SCRIPT_DIR"
fi

DebugText "DOMINO_USER: [$DOMINO_USER]" 
DOMINO_USER_GROUPID=`id -g "$DOMINO_USER" 2>/dev/null;`
DebugText "DOMINO_USER_GROUPID: [$DOMINO_USER_GROUPID]"
DebugText "START_SCRIPT_DIR: [$START_SCRIPT_DIR]"

if [ -z "$DOMINO_USER_GROUPID" ]; then
  echo "Terminating installation - User Linux '$DOMINO_USER' does not exist"
  exit 1
fi

if [ ! -e "$DOMINO_DATA_PATH" ]; then
  echo "Terminating installation - Domino data directory directory '$DOMINO_DATA_PATH' does not exist"
  exit 1
fi

install_file $START_SCRIPT_DIR/rc_domino $INIT_PATH/$DOMINO_RC_NAME $ROOT_USER $ROOT_GROUP 755
install_file $START_SCRIPT_DIR/rc_domino_script $DOMINO_START_SCRIPT_DIR/rc_domino_script $ROOT_USER $ROOT_GROUP 755
install_file $START_SCRIPT_DIR/rc_domino_readme.txt $DOMINO_START_SCRIPT_DIR/rc_domino_readme.txt "$DOMINO_USER" "$DOMINO_GROUP" 644

START_SCRIPT_CONFIG_VER=$DOMINO_START_SCRIPT_DIR/rc_domino_config_$VERSION.txt
START_SCRIPT_CONFIG_LATEST=$DOMINO_START_SCRIPT_DIR/rc_domino_config_latest.txt

install_file $START_SCRIPT_DIR/rc_domino_config $START_SCRIPT_CONFIG_VER "$DOMINO_USER" "$DOMINO_GROUP" 644

if [ -e "$START_SCRIPT_CONFIG_LATEST" ]; then
  rm -f "$START_SCRIPT_CONFIG_LATEST"
fi

ln -s $START_SCRIPT_CONFIG_VER $START_SCRIPT_CONFIG_LATEST

# create /etc/sysconfig if not present
if [ ! -e "/etc/sysconfig" ]; then
  mkdir /etc/sysconfig
  chmod 755 /etc/sysconfig
fi

if [ "$PARAM1" = "upd" ]; then
  install_file $START_SCRIPT_DIR/rc_domino_config $DOMINO_INSTALL_CONFIG_FILEPATH "$DOMINO_USER" "$DOMINO_GROUP" 644
  install_file $START_SCRIPT_DIR/systemdbs.ind $DOMINO_DATA_PATH/systemdbs.ind "$DOMINO_USER" "$DOMINO_GROUP" 644
else
  install_file_noupdate $START_SCRIPT_DIR/rc_domino_config $DOMINO_INSTALL_CONFIG_FILEPATH  "$DOMINO_USER" "$DOMINO_GROUP" 644
  install_file_noupdate $START_SCRIPT_DIR/systemdbs.ind $DOMINO_DATA_PATH/systemdbs.ind "$DOMINO_USER" "$DOMINO_GROUP" 644
fi


# if old start script location exists, replace it with link to new start script location 

OLD_RC_DOMINO_SCRIPT_LOCATION=/opt/ibm/domino/rc_domino_script

if [ -e "$OLD_RC_DOMINO_SCRIPT_LOCATION" ]; then
  rm -f "$OLD_RC_DOMINO_SCRIPT_LOCATION"
  ln -s $DOMINO_START_SCRIPT_DIR/rc_domino_script $OLD_RC_DOMINO_SCRIPT_LOCATION
  echo link for legacy start script location created [$OLD_RC_DOMINO_SCRIPT_LOCATION]
fi

# check if running inside a container
if [ -e "/.dockerenv" ]; then
  DOCKER_ENV=yes
fi

# Podman has it's own name
if [ -e "/run/.containerenv" ]; then
  DOCKER_ENV=yes
fi

# set link to include script as 'domino' into path
if [ "$DOCKER_ENV" = "yes" ]; then
  # for Docker we just link the main script
  ln -s $DOMINO_START_SCRIPT_DIR/rc_domino_script /usr/bin/domino

else
  if [ ! -e /usr/bin/domino ]; then
    ln -s $INIT_PATH/$DOMINO_RC_NAME /usr/bin/domino
  fi
fi

if [ "$DOCKER_ENV" = "yes" ]; then
  # when running in a Docker environment, don't use systemd/init.d
  echo "Docker Environment detected!"
  
  if [ "$PARAM1" = "upd" ]; then
    install_file "$START_SCRIPT_DIR/$DOMINO_DOCKER_SCRIPT" "/$DOMINO_DOCKER_SCRIPT" $ROOT_USER $ROOT_GROUP 755
  else
    install_file_noupdate "$START_SCRIPT_DIR/$DOMINO_DOCKER_SCRIPT" "/$DOMINO_DOCKER_SCRIPT" $ROOT_USER $ROOT_GROUP 755
  fi
else
  if [ ${LARCH} = "linux" ]; then
    if [ -e /etc/systemd/system ]; then
      install_file $START_SCRIPT_DIR/domino.service /etc/systemd/system/$DOMINO_SYSTEMD_NAME $ROOT_USER $ROOT_GROUP 644
  
      if [ $? -eq 2 ]; then
        systemctl daemon-reload
      fi
    fi

    # add domino service (systemd/init.d)
    $INIT_PATH/$DOMINO_RC_NAME service add
  fi
fi

echo
echo done
echo

exit 0

